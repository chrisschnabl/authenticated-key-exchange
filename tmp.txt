============================= test session starts ==============================
platform darwin -- Python 3.13.1, pytest-8.3.4, pluggy-1.5.0 -- /Users/chris/Develop/authenticated-key-exchange/.venv/bin/python3
cachedir: .pytest_cache
rootdir: /Users/chris/Develop/authenticated-key-exchange
configfile: pyproject.toml
plugins: cov-6.0.0
collecting ... collected 41 items

tests/sigma/test_user2.py::TestUser::test_user_creation PASSED           [  2%]
tests/sigma/test_user2.py::TestUser::test_obtain_certificate PASSED      [  4%]
tests/sigma/test_user2.py::TestVerifiedUser::test_initiate_handshake PASSED [  7%]
tests/sigma/test_user2.py::TestVerifiedUser::test_get_session_key_no_session PASSED [  9%]
tests/sigma/test_user2.py::TestVerifiedUser::test_get_session_key_wrong_state PASSED [ 12%]
tests/sigma/test_user2.py::TestVerifiedUser::test_get_session_key_valid PASSED [ 14%]
tests/sigma/test_user2.py::TestVerifiedUser::test_receive_unknown_message_type PASSED [ 17%]
tests/sigma/test_user2.py::TestVerifiedUser::test_receive_msg1[True] PASSED [ 19%]
tests/sigma/test_user2.py::TestVerifiedUser::test_receive_msg1[False] PASSED [ 21%]
tests/sigma/test_user2.py::TestVerifiedUser::test_receive_msg2_no_session PASSED [ 24%]
tests/sigma/test_user2.py::TestVerifiedUser::test_receive_msg2_wrong_state PASSED [ 26%]
tests/sigma/test_user2.py::TestVerifiedUser::test_receive_msg2_valid PASSED [ 29%]
tests/sigma/test_user2.py::TestVerifiedUser::test_receive_msg3_no_session PASSED [ 31%]
tests/sigma/test_user2.py::TestVerifiedUser::test_receive_msg3_wrong_state PASSED [ 34%]
tests/sigma/test_user2.py::TestVerifiedUser::test_receive_msg3_valid PASSED [ 36%]
tests/sigma/test_user2.py::TestVerifiedUser::test_send_secure_message_no_session PASSED [ 39%]
tests/sigma/test_user2.py::TestVerifiedUser::test_send_secure_message_wrong_state PASSED [ 41%]
tests/sigma/test_user2.py::TestVerifiedUser::test_send_secure_message_valid PASSED [ 43%]
tests/sigma/test_user2.py::TestVerifiedUser::test_receive_secure_message_no_session PASSED [ 46%]
tests/sigma/test_user2.py::TestVerifiedUser::test_receive_secure_message_wrong_state PASSED [ 48%]
tests/sigma/test_user2.py::TestVerifiedUser::test_receive_secure_message_valid PASSED [ 51%]
tests/sigma/test_user2.py::TestStateTransitions::test_all_possible_transitions PASSED [ 53%]
tests/sigma/test_user2.py::TestStateTransitions::test_invalid_message_order PASSED [ 56%]
tests/sigma/test_user2.py::TestFullHandshake::test_complete_handshake PASSED [ 58%]
tests/sigma/test_user2.py::TestFullHandshake::test_replay_attack PASSED  [ 60%]
tests/sigma/test_user2.py::TestFullHandshake::test_session_override PASSED [ 63%]
tests/sigma/test_user2.py::TestFullHandshake::test_message_exchange_after_handshake FAILED [ 65%]
tests/sigma/test_user2.py::TestMultipleSessions::test_multiple_peers PASSED [ 68%]
tests/sigma/test_user2.py::TestMultipleSessions::test_session_overwrite PASSED [ 70%]
tests/sigma/test_user2.py::TestUnverifiedUsers::test_unverified_user_cannot_initiate PASSED [ 73%]
tests/sigma/test_user2.py::TestUnverifiedUsers::test_unverified_user_cannot_get_session PASSED [ 75%]
tests/sigma/test_user2.py::TestUnverifiedUsers::test_certificate_validation FAILED [ 78%]
tests/sigma/test_user2.py::TestSecurityEdgeCases::test_tampered_message1 PASSED [ 80%]
tests/sigma/test_user2.py::TestSecurityEdgeCases::test_tampered_message2 PASSED [ 82%]
tests/sigma/test_user2.py::TestSecurityEdgeCases::test_tampered_message2_payload PASSED [ 85%]
tests/sigma/test_user2.py::TestSecurityEdgeCases::test_tampered_message3 PASSED [ 87%]
tests/sigma/test_user2.py::TestSecurityEdgeCases::test_wrong_receiver FAILED [ 90%]
tests/sigma/test_user2.py::TestSecurityEdgeCases::test_mitm_attack FAILED [ 92%]
tests/sigma/test_user2.py::TestSecurityEdgeCases::test_key_disclosure_attack FAILED [ 95%]
tests/sigma/test_user2.py::TestSecurityEdgeCases::test_identity_mismatch FAILED [ 97%]
tests/sigma/test_user2.py::TestSecurityEdgeCases::test_session_state_transitions PASSED [100%]

=================================== FAILURES ===================================
___________ TestFullHandshake.test_message_exchange_after_handshake ____________

self = <test_user2.TestFullHandshake object at 0x106597e10>
mock_decrypt = <MagicMock name='decrypt' id='4408675696'>
mock_encrypt = <MagicMock name='encrypt' id='4408676032'>
mock_init = <MagicMock name='__init__' id='4408676368'>
alice = VerifiedUser(identity='alice', ca=<sigma.ca.CertificateAuthority object at 0x10660f700>, certificate=Certificate(identity='alice', verify_key=<nacl.signing.VerifyKey object at 0x1066a7fc0>, signature=b'\xcf\x8cW\xdfM<\x15\xd6\\!\xef\xaf3y\x03Cs\xf9D\xdf\x7f\x8dn`\xdePLR5\x12\x9ep\xad\x869\x0f@\x05;\xed,\xdae\xc2.!f\x9a\xaa\xc8\xc9T\x93\x81|\x95\xfdLS\x81;\xa3+\x02'), signing_key=<nacl.signing.SigningKey object at 0x106c8ccb0>, sessions={'bob': InitiatedSession(ca=<sigma.ca.CertificateAuthority object at 0x10660f700>, certificate=Certificate(identity='alice', verify_key=<nacl.signing.VerifyKey object at 0x1066a7fc0>, signature=b'\xcf\x8cW\xdfM<\x15\xd6\\!\xef\xaf3y\x03Cs\xf9D\xdf\x7f\x8dn`\xdePLR5\x12\x9ep\xad\x869\x0f@\x05;\xed,\xdae\xc2.!f\x9a\xaa\xc8\xc9T\x93\x81|\x95\xfdLS\x81;\xa3+\x02'), signing_key=<nacl.signing.SigningKey object at 0x106c8ccb0>, ephemeral_private=<nacl.public.PrivateKey object at 0x106c9e450>, ephemeral_public=<nacl.public.PublicKey object at 0x106c94140>, nonce=b'\xa6x\xb6\xe9\x023\xa7k\xccR~\x8d\x88\x04[\x7f')})
bob = VerifiedUser(identity='bob', ca=<sigma.ca.CertificateAuthority object at 0x10660f700>, certificate=Certificate(identity='bob', verify_key=<nacl.signing.VerifyKey object at 0x106c940f0>, signature=b'\xe6=v\x0c7\xd4}\xa5\xe7\x85p\xd2\xc8\x9b\xe7\xc5[w\xe7\x03\x14\xd5@a\xa7\x1b|\x8e\xbc\xf6\t\xff{G\x9a}\\=\xf1\xd2tB\x08S\x8a\xd7\x867\x99\xaf\x1a\xb2\xc7Fo\x07\xa7K\xb9\xe4e\xbc.\x00'), signing_key=<nacl.signing.SigningKey object at 0x106c8cd70>, sessions={'alice': WaitingSession(ca=<sigma.ca.CertificateAuthority object at 0x10660f700>, transcript=b' \x1clGE\xd5/\x08\xcb,oq\xfe\xa4\x02\x0f\xeb7\x88\xde\xc2\xe6]\x1f\xf1\xc4\xaf\xc0t\x0c_>*_G\xf3\x02\x8d\xe9\x8bOHi\xd9\x87\xd9\x9e\xaf\xa5\xda\x17{\xef?X\x9fp\x03\x9b\x16I\x19Lx\x11O\t\xad#\xa9\xad\xe5\x06\x82JK\x92X\xbc\xb1\xa6x\xb6\xe9\x023\xa7k\xccR~\x8d\x88\x04[\x7f', derived_key=b'd36c8ffe49af29a087b2c65cde64fed9', responder_certificate=Certificate(identity='bob', verify_key=<nacl.signing.VerifyKey object at 0x106c940f0>, signature=b'\xe6=v\x0c7\xd4}\xa5\xe7\x85p\xd2\xc8\x9b\xe7\xc5[w\xe7\x03\x14\xd5@a\xa7\x1b|\x8e\xbc\xf6\t\xff{G\x9a}\\=\xf1\xd2tB\x08S\x8a\xd7\x867\x99\xaf\x1a\xb2\xc7Fo\x07\xa7K\xb9\xe4e\xbc.\x00'))})

    @patch('nacl.secret.SecretBox.__init__', return_value=None)
    @patch('nacl.secret.SecretBox.encrypt')
    @patch('nacl.secret.SecretBox.decrypt')
    def test_message_exchange_after_handshake(self, mock_decrypt, mock_encrypt, mock_init, alice: VerifiedUser, bob: VerifiedUser) -> None:
        # Configure mocks to return bytes
        mock_encrypt.return_value = b"encrypted_message_data"
        mock_decrypt.return_value = b"Hello, Bob!"

        # Complete handshake
        msg1 = alice.initiate_handshake(bob.identity)
        msg2 = bob.receive(msg1, alice)
>       msg3 = alice.receive(msg2, bob)

tests/sigma/test_user2.py:457:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src/user.py:70: in receive
    return handler(msg, sender)
src/user.py:120: in receive_msg2
    msg3, ready_session = session.receive_message2(msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = InitiatedSession(ca=<sigma.ca.CertificateAuthority object at 0x10660f700>, certificate=Certificate(identity='alice', verify_key=<nacl.signing.VerifyKey object at 0x1066a7fc0>, signature=b'\xcf\x8cW\xdfM<\x15\xd6\\!\xef\xaf3y\x03Cs\xf9D\xdf\x7f\x8dn`\xdePLR5\x12\x9ep\xad\x869\x0f@\x05;\xed,\xdae\xc2.!f\x9a\xaa\xc8\xc9T\x93\x81|\x95\xfdLS\x81;\xa3+\x02'), signing_key=<nacl.signing.SigningKey object at 0x106c8ccb0>, ephemeral_private=<nacl.public.PrivateKey object at 0x106c9e450>, ephemeral_public=<nacl.public.PublicKey object at 0x106c94140>, nonce=b'\xa6x\xb6\xe9\x023\xa7k\xccR~\x8d\x88\x04[\x7f')
msg2 = SigmaMessage2(ephemeral_pub=<nacl.public.PublicKey object at 0x106c949b0>, encrypted_payload=b'encrypted_message_data')

    def receive_message2(self, msg2: SigmaMessage2) -> Tuple[SigmaMessage3, ReadySession]:
        responder_ephem: PublicKey = msg2.ephemeral_pub
        derived_key: SymmetricKey = derive_key(responder_ephem, self.ephemeral_private)

        box = SecretBox(derived_key)
        try:
            decrypted = box.decrypt(msg2.encrypted_payload)
        except CryptoError as e:
            raise ValueError("Decryption failed") from e

>       payload: SigmaResponderPayload = pickle.loads(decrypted)
E       _pickle.UnpicklingError: invalid load key, 'H'.

src/session.py:48: UnpicklingError
_______________ TestUnverifiedUsers.test_certificate_validation ________________

self = <test_user2.TestUnverifiedUsers object at 0x1066289d0>
mock_verify = <MagicMock name='verify_certificate' id='4408677040'>
alice = VerifiedUser(identity='alice', ca=<sigma.ca.CertificateAuthority object at 0x1066929e0>, certificate=Certificate(identity='alice', verify_key=<nacl.signing.VerifyKey object at 0x1066a7480>, signature=b"\x87e\xed'1\xc1\xf5\xe7LX\x05\x04W\x95\x13\x90\x05\x9a\xd5b\x00\xb4\xd8\x1d\x85_\x0c1n3\x97\xc0\xd8<\x17p_4\xcc\\\x19\xa0\x84{Z\xfa\xc1\xe2}G:\xfdk\xba\x1c\x0f\xd3'?n}\xe6\xbd\x05"), signing_key=<nacl.signing.SigningKey object at 0x106c7f350>, sessions={'eve': InitiatedSession(ca=<sigma.ca.CertificateAuthority object at 0x1066929e0>, certificate=Certificate(identity='alice', verify_key=<nacl.signing.VerifyKey object at 0x1066a7480>, signature=b"\x87e\xed'1\xc1\xf5\xe7LX\x05\x04W\x95\x13\x90\x05\x9a\xd5b\x00\xb4\xd8\x1d\x85_\x0c1n3\x97\xc0\xd8<\x17p_4\xcc\\\x19\xa0\x84{Z\xfa\xc1\xe2}G:\xfdk\xba\x1c\x0f\xd3'?n}\xe6\xbd\x05"), signing_key=<nacl.signing.SigningKey object at 0x106c7f350>, ephemeral_private=<nacl.public.PrivateKey object at 0x106c7d310>, ephemeral_public=<nacl.public.PublicKey object at 0x1066a6490>, nonce=b'\x82\x1ba\x89M\xd2\xc2)\x87\x02\xc3\x1d\xd1;G`')})
ca = <sigma.ca.CertificateAuthority object at 0x1066929e0>

    @patch('sigma.ca.CertificateAuthority.verify_certificate')
    def test_certificate_validation(self, mock_verify, alice: VerifiedUser, ca: CertificateAuthority) -> None:
        fake_ca = TestSetup.create_ca()
        eve = User(
            identity="eve",
            ca=fake_ca,
            signing_key=SigningKey.generate()
        )
        eve_verified = eve.obtain_certificate()

        # Make the verification fail with error
        mock_verify.side_effect = ValueError("Invalid certificate")

        msg1 = alice.initiate_handshake(eve_verified.identity)

>       with pytest.raises(ValueError):
E       Failed: DID NOT RAISE <class 'ValueError'>

tests/sigma/test_user2.py:554: Failed
__________________ TestSecurityEdgeCases.test_wrong_receiver ___________________

self = <test_user2.TestSecurityEdgeCases object at 0x10666c830>
mock_receive = <MagicMock name='receive_message3' id='4408675024'>
alice = VerifiedUser(identity='alice', ca=<sigma.ca.CertificateAuthority object at 0x106692f20>, certificate=Certificate(identity='alice', verify_key=<nacl.signing.VerifyKey object at 0x1066a5950>, signature=b'\x9c\xee\xde\xd9\x82\x99\xeav\x15\xfa\xf3\x1f\xed\x06\x13\x0e\xe8\xbf\xaa\xb6$M#\xfas\x0b\x0b\x90\x12\xaf\x01\xcf\x05\xa38x\xdf\xe7\x92\x0f\x10)\xd8\xc5\x9d0w\xea\xea\xa9\x93>\x16)y&4%@\x15\x95W\xa9\x0c'), signing_key=<nacl.signing.SigningKey object at 0x106c7c290>, sessions={'bob': InitiatedSession(ca=<sigma.ca.CertificateAuthority object at 0x106692f20>, certificate=Certificate(identity='alice', verify_key=<nacl.signing.VerifyKey object at 0x1066a5950>, signature=b'\x9c\xee\xde\xd9\x82\x99\xeav\x15\xfa\xf3\x1f\xed\x06\x13\x0e\xe8\xbf\xaa\xb6$M#\xfas\x0b\x0b\x90\x12\xaf\x01\xcf\x05\xa38x\xdf\xe7\x92\x0f\x10)\xd8\xc5\x9d0w\xea\xea\xa9\x93>\x16)y&4%@\x15\x95W\xa9\x0c'), signing_key=<nacl.signing.SigningKey object at 0x106c7c290>, ephemeral_private=<nacl.public.PrivateKey object at 0x106c7bef0>, ephemeral_public=<nacl.public.PublicKey object at 0x106ca0550>, nonce=b'U\x0e@\xd5+\xb6F\x01\xd8\xcd\x02N\xc0\x13\xcd\xd5')})
bob = VerifiedUser(identity='bob', ca=<sigma.ca.CertificateAuthority object at 0x106692f20>, certificate=Certificate(identity='bob', verify_key=<nacl.signing.VerifyKey object at 0x1066a72f0>, signature=b'\x8bS$|\x1e\xe0R\xee3\xd8\xb1\'"8\x1f\xbb\xf04/\xf9\xf7\xafhbT\xc7\xf0Li\x90I\t\x8b\t#\xa0<\xc7<0\xcf`\xb9ge\xac\xf97P\x95Z?S\xceN\xee\n%]ei\xae\xe0\x06'), signing_key=<nacl.signing.SigningKey object at 0x106c7c350>, sessions={})

    @patch('session.WaitingSession.receive_message3', side_effect=ValueError("Wrong receiver"))
    def test_wrong_receiver(self, mock_receive, alice: VerifiedUser, bob: VerifiedUser) -> None:
        # Create a third user
        charlie = TestSetup.create_verified_user("charlie", alice.ca)

        # Alice initiates handshake with Bob
        msg1 = alice.initiate_handshake(bob.identity)

        # Set up suitable state for the test
        charlie.sessions[alice.identity] = WaitingSession(
            ca=charlie.ca,
            transcript=b"test",
            derived_key=b"test_key",
            responder_certificate=charlie.certificate
        )

        # Charlie tries to process message meant for Bob
>       with pytest.raises(ValueError):
E       Failed: DID NOT RAISE <class 'ValueError'>

tests/sigma/test_user2.py:639: Failed
____________________ TestSecurityEdgeCases.test_mitm_attack ____________________

self = <test_user2.TestSecurityEdgeCases object at 0x1066085a0>
mock_receive = <MagicMock name='receive_message2' id='4408674688'>
alice = VerifiedUser(identity='alice', ca=<sigma.ca.CertificateAuthority object at 0x10666b690>, certificate=Certificate(identity='alice', verify_key=<nacl.signing.VerifyKey object at 0x106ca3de0>, signature=b'\x94\x1f\xf0\x07\xf2$\xee\xc4\xb9^\xe5\x1an`>Qj\x7fa\xcdV\xba\xaeg\xe6\xcc\xc61\x9a\x13#\x9e\xf4\x1a\x81\x00\x8fs-c$\x0ex.\xc8\xbb\xc3\x81\xc9\xd6\t\xa3\xee\xb1\xda\xda\xdfL\x825\rj\x8a\x0b'), signing_key=<nacl.signing.SigningKey object at 0x106c7af30>, sessions={'bob': InitiatedSession(ca=<sigma.ca.CertificateAuthority object at 0x10666b690>, certificate=Certificate(identity='alice', verify_key=<nacl.signing.VerifyKey object at 0x106ca3de0>, signature=b'\x94\x1f\xf0\x07\xf2$\xee\xc4\xb9^\xe5\x1an`>Qj\x7fa\xcdV\xba\xaeg\xe6\xcc\xc61\x9a\x13#\x9e\xf4\x1a\x81\x00\x8fs-c$\x0ex.\xc8\xbb\xc3\x81\xc9\xd6\t\xa3\xee\xb1\xda\xda\xdfL\x825\rj\x8a\x0b'), signing_key=<nacl.signing.SigningKey object at 0x106c7af30>, ephemeral_private=<nacl.public.PrivateKey object at 0x106c78bf0>, ephemeral_public=<nacl.public.PublicKey object at 0x106ca0870>, nonce=b'\xf3\x0b\xa6\x11\xc2\x1e\xa4d\xbb\xfc\x89\x19%\xf1\x03K')})
bob = VerifiedUser(identity='bob', ca=<sigma.ca.CertificateAuthority object at 0x10666b690>, certificate=Certificate(identity='bob', verify_key=<nacl.signing.VerifyKey object at 0x106ca3930>, signature=b'\x04e\x970\xdb@\xe2\xb0\x85j\x1e\xee\r\xdd\xb0\xfe\xaa\x85\xc79bw`\x91\x9b\xd9\xa0\xf9\x0f\xbfxd\xaf5\x97\xb6\x96\xe2\x12q\x88\xf5p\x12\xd6L\xe1\xbe\xe3P\x8cy\xd9,\xd6\xa3r\x87\xd9\x86\xc8;\xba\x06'), signing_key=<nacl.signing.SigningKey object at 0x106c7aed0>, sessions={'alice': WaitingSession(ca=<sigma.ca.CertificateAuthority object at 0x10666b690>, transcript=b"\xdf\x1a\xbac%0j\x97)3\xc6\xfb\xf15M\x10~\xee\xef\x1f\xe7Z\xd7\n\x99\xad\xcc\x80\xc4\xe2\x19%\x8eCG\xdf\x82}z\xd3\xdb\xcb\x05\xa4` -1\xac\x04M\xbf\x0e\xf3\xdf\xa3-\xack'c\xda\xb2\x14N\xb6\xa9.]\xb0\t,\x98\xf2\xd1\x0b\x0e\xa6,#F\x93d\xf5\xe8F\xfc\xd1>\xaf0'\x9f\x9f\x8d\x9d", derived_key=b'a9cc5f8698295ba0f11b5001aa2299e9', responder_certificate=Certificate(identity='bob', verify_key=<nacl.signing.VerifyKey object at 0x106ca3930>, signature=b'\x04e\x970\xdb@\xe2\xb0\x85j\x1e\xee\r\xdd\xb0\xfe\xaa\x85\xc79bw`\x91\x9b\xd9\xa0\xf9\x0f\xbfxd\xaf5\x97\xb6\x96\xe2\x12q\x88\xf5p\x12\xd6L\xe1\xbe\xe3P\x8cy\xd9,\xd6\xa3r\x87\xd9\x86\xc8;\xba\x06'))})

    @patch('session.InitiatedSession.receive_message2', side_effect=ValueError("MITM detected"))
    def test_mitm_attack(self, mock_receive, alice: VerifiedUser, bob: VerifiedUser) -> None:
        mallory = TestSetup.create_verified_user("mallory", alice.ca)

        msg1 = alice.initiate_handshake(bob.identity)
        mitm_msg1 = mallory.initiate_handshake(bob.identity)

        msg2_to_mallory = bob.receive(mitm_msg1, alice)
>       mallory.receive(msg2_to_mallory, bob)

tests/sigma/test_user2.py:651:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src/user.py:70: in receive
    return handler(msg, sender)
src/user.py:120: in receive_msg2
    msg3, ready_session = session.receive_message2(msg)
/opt/homebrew/Cellar/python@3.13/3.13.1/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1167: in __call__
    return self._mock_call(*args, **kwargs)
/opt/homebrew/Cellar/python@3.13/3.13.1/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1171: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <MagicMock name='receive_message2' id='4408674688'>
args = (SigmaMessage2(ephemeral_pub=<nacl.public.PublicKey object at 0x106ca0b40>, encrypted_payload=b'\x8a"\x08\x8b\xe8\x13\xe7\xe8\xb9\xe8\x90%,UM\x08\xf8M\xc1\xc2<\x9d\xfd\x03\xc9\x98WG\xe3J.\xb5,\xeb\xb1\x0c\xd2\xcf\xbf\xc08A,\xcd\xea\xd1W\xb6\xee\x10\xfa.V\x0fs\x9e\xf7!\x08\x95\xbb\xaa0\xbar\x03\xf2\xd4\xd8\x11\x01{\xb7KRt\xae,\xd5U\xd2\xa5\x93\xb3t\xfa\xde0vc=\x8d\x1a<e\xb7#\xb3\xcel:\x10G\xa7*U:\x8d\xfd\x8a\xa7\x1e\x89\xc2\x1c\xaa\xaa7\xf7X\xbek\x1a\x9a\x168\xe1R\xc7\x16\x12\xe8Bx\x84\xe7\x89\xda\xb1 \x8a|m\xf2\xaa\xe0\xbfihF\xb7\xeb\xa1\xe1"v\xd8\xb2\xea\xe2d>h\xdbIG\x85\xb8<\xaf&\x85b\xe7S\xd1R(\x9d\x15w\xcc\xf3\\%_\x16\xe60\x89-\x1b\xcck\xd9,\xe0\xc4\xbf\xa3\xa6\xcb4\xb7\xac\xb0\xec\xd5\xaeP\x86\xeaII\x8b\xedsdM\xab!B\xf7\xf1\xd8\x92+\x02\xcaQ/Gc\xd9\xb9E]eJ.\xa3~\x9c\xb5\xe6\x01\x85\x1e\x15\xadT\xa6\xf6\xd0\xd8\xb7\xa3\x11\xb0\xbdF\x8d\xed\x1c\xe3\xfe\xd6.,|\xa7\x05\xee\xed>\xb3\xc9&\xf3\x07\xb6sz\xb3\xf6,\xa60\x96\x0c\xbc\x0b5\xee\xcd\xe63\xd7\xdd\x00\xc41\xf5\xc08j\x1b\x03\xcf\x81\x8e\xe5\xca=\x1b0\x18\xd5\x049\x9ac\xe9\xee3J\xee\xd7\xf3y\x17\x1e\x0c&\x87b%xw\xb2\xc3\xddws\xc4\x80/\xdd\x1b09\xd6s\xdbR}\x15+\x17\x8cYD\x19\x19\xe3=\x8a\x0b\xe9\x05\xc1z\xe3\xa4\x97\xe5\x84E\xfa\xacpk\xd9\x1fLI\x97\x94\x16\xad\x92\xfb\xf2e\xfd\xc1\x05o\xda\x1a\x1b\xefs\xec\x8f5\x1f\x14W\xac\xec\xfc\xaf\xe8{\x001\x0e%\x9e\xd2\x85\x04\xb8\xa5\xcd\xd9?\xd9qm2\xf7\xa0\xa9\x0b"\xd4\xb2\x8d?N\x9d\xe6h|Y\x9ec\x9e\x92\x11\x17\x06\xfa\x13\xff\x06\xd0\x05\xd4\x92&\x9f\xb2\xc2\xe0\xa5\xc6p\x1f-o1\xae\x9a\xb2\x83s\xdb:\x06\xe6{\xa3|\xedJ.t\xb1\xf2\'W\x82\x06\xb0\x01(q\xbaLs\xad\x9e=\xf7z\xa3#\x16Y%\xb7\x96\x82\xc6\x12\xf2\xdb-Q\x1b7\xf9\xf5t"^vC\xfe{\xd6\xc3\xc9$\xa3>\x9d\x8d\x0e\x109)\xba\xac\x965\x0b\xa3\xfb\x11\x8c\x86\x14\x9d\x81O\x9d\xaa\x02<u\xcc>\xbcl\xa0\xcdV\x91\xf6\x87\xed\xaeE\xcb\xb99\xc9\xbb\xb2P\xc2\xf3\x02\n\xa4\xd4\xb0b: \x1f\xcdm?\x9e\xcb\xc9\x15\x8d)\xdd\xd1l\xf2\xe0\xb3\xed\xdewU\xc6\x10\x13>\xcb0\x8f\xec\xfd\x98\xbc'),)
kwargs = {}, effect = ValueError('MITM detected')

    def _execute_mock_call(self, /, *args, **kwargs):
        # separate from _increment_mock_call so that awaited functions are
        # executed separately from their call, also AsyncMock overrides this method

        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
>               raise effect
E               ValueError: MITM detected

/opt/homebrew/Cellar/python@3.13/3.13.1/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1226: ValueError
_______________ TestSecurityEdgeCases.test_key_disclosure_attack _______________

args = (<test_user2.TestSecurityEdgeCases object at 0x1066087c0>,)
keywargs = {'alice': VerifiedUser(identity='alice', ca=<sigma.ca.CertificateAuthority object at 0x1066937e0>, certificate=Certificate(identity='alice', verify_key=<nacl.signing.VerifyKey object at 0x106ce0410>, signature=b"\xc62\xbal'\xa8r\x03\x8e\x1b\xd7\xa5\xe2*z\xd5|\r9\x06\xff\x81jB\xf2\x03\xcf\x9e\xd3\xc3\xf1T\x0b\xcd?\xd4\xad\xb4E\x99\xd5O9s{\xd4\xad \xf0UD\x16\x0041\xeby\x95\xd3t\xa7!!\x05"), signing_key=<nacl.signing.SigningKey object at 0x106cdd550>, sessions={}), 'bob': VerifiedUser(identity='bob', ca=<sigma.ca.CertificateAuthority object at 0x1066937e0>, certificate=Certificate(identity='bob', verify_key=<nacl.signing.VerifyKey object at 0x106ce0870>, signature=b'`\\K\xbb\xf7\xda\x86\xbfT\x0c\xaeq~*r\x9f\xc4\xafp\x07\xe5\xdb83\xb7\x16,\xec\x8d7\xb634\xbb8\xa5=\xb9\x05_P\x8d\xce\xca\x06\xbf\xec\x821;\x8bZ\xeaw\xa2L\xac\r\xf9.\xba\xc5\x04\x00'), signing_key=<nacl.signing.SigningKey object at 0x106cdd5b0>, sessions={})}

    @wraps(func)
    def patched(*args, **keywargs):
>       with self.decoration_helper(patched,
                                    args,
                                    keywargs) as (newargs, newkeywargs):

/opt/homebrew/Cellar/python@3.13/3.13.1/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1421:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
/opt/homebrew/Cellar/python@3.13/3.13.1/Frameworks/Python.framework/Versions/3.13/lib/python3.13/contextlib.py:141: in __enter__
    return next(self.gen)
/opt/homebrew/Cellar/python@3.13/3.13.1/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1403: in decoration_helper
    arg = exit_stack.enter_context(patching)
/opt/homebrew/Cellar/python@3.13/3.13.1/Frameworks/Python.framework/Versions/3.13/lib/python3.13/contextlib.py:530: in enter_context
    result = _enter(cm)
/opt/homebrew/Cellar/python@3.13/3.13.1/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1495: in __enter__
    original, local = self.get_original()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <unittest.mock._patch object at 0x106624b50>

    def get_original(self):
        target = self.getter()
        name = self.attribute

        original = DEFAULT
        local = False

        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True

        if name in _builtins and isinstance(target, ModuleType):
            self.create = True

        if not self.create and original is DEFAULT:
>           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: <class 'user.VerifiedUser'> does not have the attribute 'sessions'

/opt/homebrew/Cellar/python@3.13/3.13.1/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1465: AttributeError
_________________ TestSecurityEdgeCases.test_identity_mismatch _________________

self = <test_user2.TestSecurityEdgeCases object at 0x106625350>
mock_receive = <MagicMock name='receive_message3' id='4408674352'>
alice = VerifiedUser(identity='alice', ca=<sigma.ca.CertificateAuthority object at 0x106cbd710>, certificate=Certificate(identity='alice', verify_key=<nacl.signing.VerifyKey object at 0x106cf6b20>, signature=b'k\xee\xc9\x0e\t\x074W\xa2\x0bo\xe5\x10\x95\x8c\tx\xf8@\x93A\x1fy\x1c\xf0\x14\x96BD\xf2Zz\x01*/\xfc{j\rU\xbd\xe7\x8d\xeb\x90\xc8\xbc\x81*\xbd\x92[\x98\xe7\x7ftz\xbc\xf1J:!\xb1\r'), signing_key=<nacl.signing.SigningKey object at 0x106c57110>, sessions={'mallory': InitiatedSession(ca=<sigma.ca.CertificateAuthority object at 0x106cbd710>, certificate=Certificate(identity='alice', verify_key=<nacl.signing.VerifyKey object at 0x106cf6b20>, signature=b'k\xee\xc9\x0e\t\x074W\xa2\x0bo\xe5\x10\x95\x8c\tx\xf8@\x93A\x1fy\x1c\xf0\x14\x96BD\xf2Zz\x01*/\xfc{j\rU\xbd\xe7\x8d\xeb\x90\xc8\xbc\x81*\xbd\x92[\x98\xe7\x7ftz\xbc\xf1J:!\xb1\r'), signing_key=<nacl.signing.SigningKey object at 0x106c57110>, ephemeral_private=<nacl.public.PrivateKey object at 0x106d74c50>, ephemeral_public=<nacl.public.PublicKey object at 0x106cf6c60>, nonce=b'uX\xf2\xf9@\xf0]s!\x80,\xe7\xfc\x94\xd1z')})
bob = VerifiedUser(identity='bob', ca=<sigma.ca.CertificateAuthority object at 0x106cbd710>, certificate=Certificate(identity='bob', verify_key=<nacl.signing.VerifyKey object at 0x106cf7160>, signature=b'\xba\x80\xff\xeeR\xefR\xae\xc7:;\xa1\rD\x81\x05\xd4\xba\xf0\xb4\x1fv\x08\xeb#\xf7\xac\xcc\xd3\x8f\xdb\xaf!\x93\x9c\xe6%\xdc\xe7\xe7\xc9\x9e\x1ag\x11J\x98H7l\xd5\x83\xa9\x96\xeb>e\xfd\xd1\xc1\xe5\xf7\x85\x0e'), signing_key=<nacl.signing.SigningKey object at 0x106c570b0>, sessions={'alice': WaitingSession(ca=<sigma.ca.CertificateAuthority object at 0x106cbd710>, transcript=b'\xcd\x0e\x8a\xac\x02\xfce\xc4\xaf\x02\xc6\x93mG\xc4{\x8cp\xf6\x94}<\xb5\xef{\xbe\xa5\xec\x97\xf4\xb0c\xa6\xad8h\xd1ej\x81\xdbj4\xffb8\x1b{\x82\xddd`\x16\x92S\x1e!\x92\x80c\x06\x9a\xf1\x12\xd4\xb4\xa0\x19\x94\xa96\x05;\x81b\xd9\x06]I\xaduX\xf2\xf9@\xf0]s!\x80,\xe7\xfc\x94\xd1z', derived_key=b'2b31fbcd41719b909982a46ee6561b5f', responder_certificate=Certificate(identity='bob', verify_key=<nacl.signing.VerifyKey object at 0x106cf7160>, signature=b'\xba\x80\xff\xeeR\xefR\xae\xc7:;\xa1\rD\x81\x05\xd4\xba\xf0\xb4\x1fv\x08\xeb#\xf7\xac\xcc\xd3\x8f\xdb\xaf!\x93\x9c\xe6%\xdc\xe7\xe7\xc9\x9e\x1ag\x11J\x98H7l\xd5\x83\xa9\x96\xeb>e\xfd\xd1\xc1\xe5\xf7\x85\x0e'))})
ca = <sigma.ca.CertificateAuthority object at 0x106cbd710>

    @patch('session.WaitingSession.receive_message3', side_effect=ValueError("Identity mismatch"))
    def test_identity_mismatch(self, mock_receive, alice: VerifiedUser, bob: VerifiedUser, ca: CertificateAuthority) -> None:
        mallory = TestSetup.create_verified_user("mallory", ca)

        msg1 = alice.initiate_handshake("mallory")

        # Setup suitable state for test
        bob.sessions[alice.identity] = WaitingSession(
            ca=bob.ca,
            transcript=b"test",
            derived_key=b"test_key",
            responder_certificate=bob.certificate
        )

>       with pytest.raises(ValueError):
E       Failed: DID NOT RAISE <class 'ValueError'>

tests/sigma/test_user2.py:705: Failed
=========================== short test summary info ============================
FAILED tests/sigma/test_user2.py::TestFullHandshake::test_message_exchange_after_handshake - _pickle.UnpicklingError: invalid load key, 'H'.
FAILED tests/sigma/test_user2.py::TestUnverifiedUsers::test_certificate_validation - Failed: DID NOT RAISE <class 'ValueError'>
FAILED tests/sigma/test_user2.py::TestSecurityEdgeCases::test_wrong_receiver - Failed: DID NOT RAISE <class 'ValueError'>
FAILED tests/sigma/test_user2.py::TestSecurityEdgeCases::test_mitm_attack - ValueError: MITM detected
FAILED tests/sigma/test_user2.py::TestSecurityEdgeCases::test_key_disclosure_attack - AttributeError: <class 'user.VerifiedUser'> does not have the attribute 'sessions'
FAILED tests/sigma/test_user2.py::TestSecurityEdgeCases::test_identity_mismatch - Failed: DID NOT RAISE <class 'ValueError'>
========================= 6 failed, 35 passed in 0.31s =========================
